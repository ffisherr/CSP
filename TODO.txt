1) Управление заявками. Любой сотрудник компании должен иметь возможность подать заявку на решение ИТ-инцидента. ИТ-инцидент должен регистрироваться в системе и назначаться на исполнителя.

2) Подать заявку можно посредством обращения через чат или по электронной почте. Чат-бот должен отвечать на наиболее частые вопросы пользователей и подсказывать возможные решения проблемы пользователей.

3) Пользователь может заказать оборудование из списка посредством размещения заявки в системе. Должно быть доступно также консультирование по выбору оборудования. Оборудование стоимостью свыше 100 тыс рублей должно валидироваться руководителем сотрудника.

4) Система должна оповещать сотрудников у кого подходит к концу срок использования его оборудования и требуется замена.

5) TeamLead команды поддержки должен иметь возможность взаимодействия с командой в режиме онлайн, так как команда распределенная и видеть отчетность в режиме онлайн.

6) По результатам месяца должна быть доступна отчетность о количестве заявок и статусе их решения, а также список сотрудников, получивших новое оборудование.


0 - сотрудник
1 - начальник
3 - сотрудник техроддержки
4 - начальник техподдержки
Регистрация:
Название компании (Выпадающий список)
Название отдела (Выпадающий список)
ФИО
Дата рождения
Срок договора
(Роль-сервер)
Статус - свободен/занят/нет на месте

Чат (по дефолту - чат-бот, сотрудник тех поддержки)

Для юзера со статусом начальник: Заявки ожидающие подтверждения; Отчетность

Заказ: Статусом (0 - Отправлена, 1 - ожидает подтверждения, 2 - Принята к рассмотрению, 3 - Отклонено, 4 - Принято положительное решение)

Тех поддержка:
Статус(0-онлайн, 1-офлайн)

TL тех поддержки:
1. Список сотрудников со статусом и номер активной заявки(кликабельная (инфо о заявке, ссылка на чат по заявке))
2. 


abstract class User {
	private Integer roleId;	// Роль  
	private Integer Id;	// 
	private String CompanyName;
	private String firstName;  // Имя
	private String surName;    // Фамилия
	private String secondName; // Отчество
	private Date   birthDate;  // Дата рождения
	private Date   endOfContract; // Дата окончания договора
	private String email;
}

class CasualUser extends User {}



class TechSupport extends User {
	private Integer Status;
}

class AplicationForm {
	private Integer id;
	private Date dateWhenCreated;
	private Date dateWhenClosed;
	private Integer Status;
	private Equipment equipment;
	private CasualUser creator;
	private User solver; // чувак который работает над заявкой
	
	public ApplicationForm(Equipment e) {
		equipment = e;
		if (e.getCost() > 100000)
			status = передать начальнику
		else
			status = передать в работу
	}
	
}

class Equipment {
	private Integer id;
	private Integer cost;
	public Equipment(Integer cost) {this.cost = cost;}
	public Integer getCost() {return cost;}
}

abstract class Chat {
	private List<User> users;//ты/обработчик заявки/бот/начальник
}

class ChatBot extends Chat {
	Bot bot;
}

class TechBossChat extends Chat {
	
}















































